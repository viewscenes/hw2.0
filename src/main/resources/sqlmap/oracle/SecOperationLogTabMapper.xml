<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.hw.mapper.SecOperationLogTabMapper">

	<resultMap id="SecOperationLogTab" type="com.hw.domain.po.SecOperationLogTab">
        <result property="logId" column="LOG_ID"/>
        <result property="operationId" column="OPERATION_ID"/>
        <result property="operationName" column="OPERATION_NAME"/>
        <result property="userId" column="USER_ID"/>
        <result property="userName" column="USER_NAME"/>
        <result property="logDatetime" column="LOG_DATETIME"/>
        <result property="description" column="DESCRIPTION"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		LOG_ID,OPERATION_ID,OPERATION_NAME,USER_ID,USER_NAME,LOG_DATETIME,DESCRIPTION
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and oracle -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="logId">
    <![CDATA[
        INSERT INTO SEC_OPERATION_LOG_TAB (
        	LOG_ID ,
        	OPERATION_ID ,
        	OPERATION_NAME ,
        	USER_ID ,
        	USER_NAME ,
        	LOG_DATETIME ,
        	DESCRIPTION 
        ) VALUES (
        	#{logId} ,
        	#{operationId} ,
        	#{operationName} ,
        	#{userId} ,
        	#{userName} ,
        	#{logDatetime} ,
        	#{description} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE SEC_OPERATION_LOG_TAB SET
	        OPERATION_ID = #{operationId} ,
	        OPERATION_NAME = #{operationName} ,
	        USER_ID = #{userId} ,
	        USER_NAME = #{userName} ,
	        LOG_DATETIME = #{logDatetime} ,
	        DESCRIPTION = #{description} 
        WHERE 
	        LOG_ID = #{logId} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM SEC_OPERATION_LOG_TAB WHERE
        LOG_ID = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="SecOperationLogTab">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM SEC_OPERATION_LOG_TAB 
	        WHERE 
		        LOG_ID = #{id} 
	    ]]>
	</select>
	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(logId)">
				AND LOG_ID = #{logId}
			</if>
	       <if test="@Ognl@isNotEmpty(operationId)">
				AND OPERATION_ID = #{operationId}
			</if>
	       <if test="@Ognl@isNotEmpty(operationName)">
				AND OPERATION_NAME = #{operationName}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				AND USER_ID = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(userName)">
				AND USER_NAME = #{userName}
			</if>
	       <if test="@Ognl@isNotEmpty(logDatetimeBegin)">
				AND LOG_DATETIME >= #{logDatetimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(logDatetimeEnd)">
				AND LOG_DATETIME &lt;= #{logDatetimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(description)">
				AND DESCRIPTION = #{description}
			</if>
		</where>
	</sql>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM SEC_OPERATION_LOG_TAB 
		<include refid="findPage_where"/>
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="SecOperationLogTab">
    	SELECT <include refid="columns" />
	    FROM SEC_OPERATION_LOG_TAB 
		<include refid="findPage_where"/>
		

    </select>

	
</mapper>

